---
alwaysApply: true
---

Regras para Desenvolvimento de Componentes Stencil.js

🆕 Criação de Novo Componente

1. Usar um componente de referência

Sempre inicie um novo componente com base em um existente que já siga os padrões do projeto.

Isso garante consistência estrutural, nomes de arquivos, padrões de código e organização de diretórios.

Exemplo de estrutura esperada:

/src/components/
  /meu-componente/
    meu-componente.tsx
    meu-componente.scss
    index.html (documentação)

✍️ Estrutura e Padrões de Código

2. Manter estilo e legibilidade

O código deve seguir o mesmo padrão de escrita dos componentes existentes — especialmente no uso de:

Nomes de props e states

Estrutura de render()

3. SCSS padronizado

O arquivo .scss deve ser fácil de entender e manter.

Seguir a mesma estrutura visual e hierarquia de seletores usada no componente de referência.

Evitar nesting profundo e regras desnecessárias.

🎨 Tema e Customização

4. Usar variáveis de tema

Todo estilo customizável deve utilizar as variáveis globais definidas em /src/global/conecta.scss.

Nunca usar valores fixos de cor, espaçamento, tipografia ou sombra quando houver variável disponível.

📄 Documentação e Arquivos Gerados

5. Não gerar readme.md manualmente

O Stencil.js gera o README automaticamente durante o build (npm run build).

Não é necessário (nem permitido) criar ou editar o readme.md dentro do diretório do componente.

6. Documentação no index.html

Toda documentação visual e exemplos de uso devem ser inseridos no arquivo index.html do componente.

O conteúdo do index.html serve como guia de uso e vitrine (preview) para testes manuais e integração.

🧪 Testes e Boas Práticas Internas

7. Não escrever testes unitários

Testes unitários não são obrigatórios e não devem ser criados neste projeto.

O foco deve estar na funcionalidade e consistência visual.

8. Responsabilidade de documentação

Sempre que criar ou alterar um componente, solicitar a documentação de uso (por exemplo, atualizando o index.html).

O desenvolvedor é responsável por garantir que o exemplo esteja funcional e compreensível.

✅ Regra Final

A prioridade é manter consistência, legibilidade e aderência aos padrões do projeto.
Cada novo componente deve parecer e se comportar como parte de um mesmo ecossistema, respeitando as práticas estabelecidas.