---
alwaysApply: true
---

Siga a documenta√ß√£o oficial

Fonte prim√°ria: https://stenciljs.com/docs

Todas as decis√µes de arquitetura, configura√ß√£o e uso de decoradores (@Component, @Prop, @State, @Event, etc.) devem seguir estritamente a documenta√ß√£o oficial.

Em casos de d√∫vida ou ambiguidade, priorize o comportamento real descrito na documenta√ß√£o e nos exemplos oficiais ‚Äî e n√£o em f√≥runs ou postagens externas.

2. Componentiza√ß√£o Correta

Cada componente deve ser aut√¥nomo, reutiliz√°vel e possuir uma √∫nica responsabilidade.

Evite l√≥gica de neg√≥cio complexa dentro dos componentes ‚Äî mova-a para servi√ßos ou utilit√°rios externos.

Respeite a filosofia ‚Äúweb components first‚Äù ‚Äî os componentes devem poder ser usados fora do Stencil (por exemplo, em React, Angular, etc.) sem depend√™ncias internas.

3. Conven√ß√µes de Nomenclatura

Nome do componente em kebab-case (my-component)

Nome da classe em PascalCase (export class MyComponent)

Props e m√©todos p√∫blicos devem ser expressivos e previs√≠veis (onSubmit, isVisible, userData)

4. Organiza√ß√£o do Projeto
/src/components/ ‚Üí cada componente em seu pr√≥prio diret√≥rio:

/my-component/
  my-component.tsx
  my-component.css

/src/utils/ ‚Üí fun√ß√µes puras e auxiliares.

/src/global/ ‚Üí configura√ß√µes e estilos globais.


üé® Estilo e UI/UX

5. CSS e Shadow DOM

Prefira encapsulamento nativo com shadow: true.

Use vari√°veis CSS para customiza√ß√£o externa.

Evite depend√™ncias de frameworks CSS dentro do Shadow DOM (ex.: Bootstrap).

6. Acessibilidade

Garanta suporte a aria-*, role, tabindex e navega√ß√£o por teclado.

Teste os componentes com leitores de tela quando aplic√°vel.

üß© C√≥digo e Performance

7. Props, States e Imutabilidade

@Prop() ‚Üí apenas para dados de entrada; nunca modificar internamente.

@State() ‚Üí apenas para dados internos mut√°veis.

Sempre mantenha imutabilidade (use operadores spread/rest ou fun√ß√µes puras).

8. Eventos e Comunica√ß√£o

Use @Event() e EventEmitter para comunica√ß√£o de dentro para fora.

Use props para comunica√ß√£o de fora para dentro.

Evite vari√°veis globais para sincroniza√ß√£o de estado.

9. Renderiza√ß√£o

Os m√©todos render() devem ser puros e previs√≠veis.

Use JSX nativo (sem depend√™ncias do React).

Evite recomputa√ß√µes desnecess√°rias ‚Äî use @Watch() quando apropriado.

‚úÖ Regra Final

A IA deve sempre seguir as pr√°ticas oficiais e o estilo recomendado pela equipe do Stencil.

Nada deve ser implementado de forma ‚Äúsemelhante ao React‚Äù ou usando padr√µes n√£o nativos do Stencil.

Se o comportamento desejado n√£o for oficialmente suportado, deve-se sugerir uma alternativa que esteja alinhada √† filosofia dos Web Components.Siga a documenta√ß√£o oficial

Fonte prim√°ria: https://stenciljs.com/docs

Todas as decis√µes de arquitetura, configura√ß√£o e uso de decoradores (@Component, @Prop, @State, @Event, etc.) devem seguir estritamente a documenta√ß√£o oficial.

Em casos de d√∫vida ou ambiguidade, priorize o comportamento real descrito na documenta√ß√£o e nos exemplos oficiais ‚Äî e n√£o em f√≥runs ou postagens externas.

2. Componentiza√ß√£o Correta

Cada componente deve ser aut√¥nomo, reutiliz√°vel e possuir uma √∫nica responsabilidade.

Evite l√≥gica de neg√≥cio complexa dentro dos componentes ‚Äî mova-a para servi√ßos ou utilit√°rios externos.

Respeite a filosofia ‚Äúweb components first‚Äù ‚Äî os componentes devem poder ser usados fora do Stencil (por exemplo, em React, Angular, etc.) sem depend√™ncias internas.

3. Conven√ß√µes de Nomenclatura

Nome do componente em kebab-case (my-component)

Nome da classe em PascalCase (export class MyComponent)

Props e m√©todos p√∫blicos devem ser expressivos e previs√≠veis (onSubmit, isVisible, userData)

4. Organiza√ß√£o do Projeto
/src/components/ ‚Üí cada componente em seu pr√≥prio diret√≥rio:

/my-component/
  my-component.tsx
  my-component.css

/src/utils/ ‚Üí fun√ß√µes puras e auxiliares.

/src/global/ ‚Üí configura√ß√µes e estilos globais.


üé® Estilo e UI/UX

5. CSS e Shadow DOM

Prefira encapsulamento nativo com shadow: true.

Use vari√°veis CSS para customiza√ß√£o externa.

Evite depend√™ncias de frameworks CSS dentro do Shadow DOM (ex.: Bootstrap).

6. Acessibilidade

Garanta suporte a aria-*, role, tabindex e navega√ß√£o por teclado.

Teste os componentes com leitores de tela quando aplic√°vel.

üß© C√≥digo e Performance

7. Props, States e Imutabilidade

@Prop() ‚Üí apenas para dados de entrada; nunca modificar internamente.

@State() ‚Üí apenas para dados internos mut√°veis.

Sempre mantenha imutabilidade (use operadores spread/rest ou fun√ß√µes puras).

8. Eventos e Comunica√ß√£o

Use @Event() e EventEmitter para comunica√ß√£o de dentro para fora.

Use props para comunica√ß√£o de fora para dentro.

Evite vari√°veis globais para sincroniza√ß√£o de estado.

9. Renderiza√ß√£o

Os m√©todos render() devem ser puros e previs√≠veis.

Use JSX nativo (sem depend√™ncias do React).

Evite recomputa√ß√µes desnecess√°rias ‚Äî use @Watch() quando apropriado.

‚úÖ Regra Final

A IA deve sempre seguir as pr√°ticas oficiais e o estilo recomendado pela equipe do Stencil.

Nada deve ser implementado de forma ‚Äúsemelhante ao React‚Äù ou usando padr√µes n√£o nativos do Stencil.

Se o comportamento desejado n√£o for oficialmente suportado, deve-se sugerir uma alternativa que esteja alinhada √† filosofia dos Web Components.